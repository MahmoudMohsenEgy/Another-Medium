-- phpMyAdmin SQL Dump
-- version 5.2.0
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1:3309
-- Generation Time: Jun 20, 2022 at 10:19 PM
-- Server version: 10.4.24-MariaDB
-- PHP Version: 8.1.6

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `another_medium`
--

-- --------------------------------------------------------

--
-- Table structure for table `posts`
--

CREATE TABLE `posts` (
  `id` int(255) NOT NULL,
  `title` varchar(255) NOT NULL,
  `content` text NOT NULL,
  `date` date NOT NULL DEFAULT current_timestamp(),
  `authorId` int(255) NOT NULL,
  `img` varchar(255) NOT NULL DEFAULT 'https://i.postimg.cc/D0JTfP4f/Another-Medium-logos-black.png'
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `posts`
--

INSERT INTO `posts` (`id`, `title`, `content`, `date`, `authorId`, `img`) VALUES
(1, 'Bitcoin Smart Contracts Are Coming to Internet Computer DeFi Projects', 'The mining of Bitcoin’s “Genesis Block” on January 3, 2009 is one of the biggest technological events in recent history. Bitcoin, now the world’s largest cryptocurrency, demonstrated the first use case for the immutable, transparent, and tamper-proof ledger technology called blockchain, laying the foundation for the development of today’s crypto industry.\r\n\r\nSmart contracts were later introduced by Ethereum, with blockchain networks becoming full-fledged financial ecosystems that facilitate complex transactions in a trustless way. But if Bitcoin were to also have advanced smart contracts, developers would finally be able to build a variety of dapps and DeFi projects that can natively use BTC, unlocking immense value and bringing the adoption of crypto and DeFi further into the mainstream.\r\n\r\nIn a major step toward that reality, the Internet Computer blockchain will soon launch a direct integration with the Bitcoin network by the end of Q1 — and next-generation DeFi projects like Sonic, InfinitySwap, and ICPSwap are preparing to leverage the upgrade.\r\nRather than “bridging” BTC into the Internet Computer, the integration implements Chain Key cryptography to establish a secure, direct interface with the Bitcoin ledger, making it “trustless” rather than reliant on an intermediary. This enables developers to build canister smart contracts that communicate with the Bitcoin network. Users maintain their private keys, and all signatures are created using a multi-party protocol. A Bitcoin Adapter connects to the Bitcoin mainnet to retrieve blocks and send outgoing transactions. Canister smart contracts on the Internet Computer effectively become Bitcoin wallets, with the ability to receive, hold, and send BTC.\r\n\r\n“Dapps on the Bitcoin-integrated Internet Computer network will have a much better user experience because of Chain Key technology,” says InfinitySwap CEO Max Chamberlin. “On InfinitySwap, for example, you’ll be able to transfer your BTC directly to another Bitcoin address to enter a liquidity pool. On other chains the process has more steps, involves centralized bridges, and you also need to hold the base-layer coin. Here, all you need is BTC to participate.”\r\n\r\nICPSwap plans to integrate BTC as the base currency for trading.\r\nA New DeFi Hub\r\nSmart contracts using the Bitcoin network will bring a paradigm shift, allowing Bitcoin’s liquidity to flow into a new hub for DeFi applications. Bitcoin-based lending and borrowing protocols as well as AMM DEXs involving BTC are set to become a reality.\r\n\r\n“On ICPSwap, it will soon be possible to use $BTC as part of the liquidity of the asset and as the underlying asset to create pairs like $ICP/$BTC and $ICS/$BTC,” says the ICPSwap team. “The successful integration with Bitcoin will significantly facilitate the growth of ICPSwap asset liquidity and increase user participation.”\r\n\r\n“Bringing BTC liquidity into the Internet Computer can allow the Bitcoin ecosystem and IC projects to tap into a new wave of use cases and multi-chain asset interactions,” adds Sonic COO Nicholas Poggi. “Everything from BTC smart contracts on IC canisters powering complex DeFi operations like lending, to creating a wrapped version of BTC on the IC and having it seamlessly interoperate with other IC tokens and assets from other Terabethia-bridged chains (e.g. Ethereum) on an AMM like Sonic.”\r\n\r\nThere are also plans to introduce an Internet Computer-native form of wrapped Bitcoin based on the direct integration, through a canister governed by the NNS. A ledger-based implementation would enable users to obtain a new form of “wrapped” BTC without requiring additional trust assumptions. Because the Internet Computer makes DeFi with zero gas fees possible, this new asset would be usable on the network without any of Bitcoin’s limitations — high on-chain fees, low scalability, low capacity, etc. — substantially reducing transaction costs and finality.\r\n\r\n“The most immediate benefits DEXs can get from the Internet Computer are faster transaction speeds and extremely low fees,” notes Poggi. “That, combined with the Internet Computer’s future native integrations to other chains like Ethereum, can generate a really interesting scenario where DEXs on the IC become a natural L2-like DEX solution for tokens on other networks.”\r\nBitcoin’s Network Effects\r\nThere is also great potential for developers to create Bitcoin-based GameFi and SocialFi dapps on the Internet Computer. They will be uniquely positioned to benefit from Bitcoin’s standing as the world’s most trusted cryptocurrency as well as the Internet Computer’s unmatched scalability, fueling the increased adoption of decentralized networks.\r\n\r\nBitcoin is the world’s largest crypto asset by value and contributes to over 40% of the total cryptocurrency market cap. This monumental value and trust makes Bitcoin’s direct integration with the most powerful general-purpose blockchain a high-impact prospect for the industry, setting the stage for an immense range of new possibilities.', '2022-06-19', 1, 'https://miro.medium.com/max/1400/1*Z5tsav07HeETEPb8rLdTyw.jpeg'),
(2, 'Create your Professional/Educational resume using LaTeX', 'I’ve seen a lot of cluttered resumes, lacking visual rules, endless chunks of text; some got me depressed. Apart from being a programmer since 2007, I had a UX role and provided a lot of coaching. That and the love for data visualization led me to write this article, where I’ll share what I’ve learned, with the hope it can help you. I’ll give software development examples since that’s my professional area. However, the article can be applied to other domains as well.\r\n\r\nThe format\r\nFiles are an outdated concept considering the cloud era we’re living in — at least for sharing, which is your ultimate goal when creating your resume. You fail miserably if you search your email for attachments every time you need to apply for a role. Or even worse, you have it on your home computer (“I’ll send it when I get home”). Is that even the latest version? And what about when you send it with a typo or missed something? Too late to fix it!\r\n\r\nAttaching resumes is not that different from printing them and knocking on doors. Be pragmatic: you want to edit easily, everywhere, at any time. Sharing should be one step. In those rare cases when they ask you for a file, you (or the recruiter) can always export it as a file — but at least you have a single online source of truth that you never lose sight of.\r\n\r\nJust go to your favorite cloud word processor (e.g. Google Docs, Microsoft Word Online, Zoho Docs, Dropbox Paper), create a document titled “<Your Name> resume” and share it publicly in view-only mode. Time to scrap out that 7 pages long “my-resume-final-v3.docx” file from your documents folder and embrace this millennium!\r\n\r\nThe next thing you want is an online URL shortener that lets you create custom links. Bitly lets you do it after signing up, Bit.do lets you do it straight away, and there are plenty of others. Even better: if you have a personal website/blog, create a link like yourwebsite.com/resume or resume.yourwebsite.com. The link is the only thing you email the recruiter: “Check my resume at bit.ly/jane-doe-resume”. You can even say it by phone!\r\n\r\nThe users\r\nWho are your users? Likely the recruiters, HR, and eventual interviewers. And don’t forget the internet community who want to know more about you. Can you identify their use cases? Sharing, visually/vertically scanning, printing, searching for something are some. Your users must remember who you are and something that distinguishes you from everyone else.\r\n\r\nYes, we know many HR can’t grasp the difference between Java and JavaScript, but their main job is matching you with a client. It’s their call to move on (or not) with the process. You should communicate in a way they value. Focus on the business/user achievements. Technologies are important but what you did with them is more valuable. Consider a summary at the top. Think about keywords they would search for. The resume is an opportunity to show them you have some skills besides programming (e.g. visual design, writing, common sense, organization, attention to detail).\r\n\r\nThe content\r\nLet’s start with the obvious: the work experience followed by the main education. Now, the not-so-obvious; the “extra miles” you may have traversed. I hear people complaining they have nothing more to add. But think about the pet projects, the internships, and open source contributions. Consider the training given by the companies you worked for. The training and talks you gave are of course important. And what about that Udemy course you took last summer and the “Kotlin for Android” talk you attended? Any award? Your thesis or other publications? And don’t forget that IoT project you’re building. Links to HackerRank, LinkedIn, Stack Overflow, a professional blog, or a homepage are also welcome. Don’t underrate those details, especially if you’re a junior developer wanting to show the world the will to learn and create. And by the way: why don’t you start a blog?\r\n\r\nIn summary, here’s what you should include in the resume:\r\n\r\nFirst and last name (top in large font)\r\nTitle (below name); e.g: Back-end web developer\r\nEmail (at header; link it)\r\nProfessional experience (recent to oldest; separate roles, projects, and technologies; the sector is optional). Let me just give you a rough template:\r\nAcademic titles (recent to oldest; with the institution, main subjects, and period of time; the grade is optional)\r\nMain training and certifications (title, institution, year, link to certificate if possible)\r\nPersonal pet projects (created and participated)\r\nWhat you may include:\r\n\r\nSummary of you (a single sentence or a bulleted list with main skills, sectors, techs, etc.)\r\nPhoto (small); it helps memorability, especially when the recruiter gets a lot of resumes\r\nCurrent city\r\nNationality\r\nLanguages (use just a sentence that sums it up)\r\nPhone number (close to email; include international prefix)\r\nHobbies (especially if they can influence your role or tell you apart from the others)\r\nMain attended events (at the bottom with title and date)\r\nPublications (books, articles, blogs)\r\nLinks to LinkedIn, GitHub, etc. (explicit in the footer)\r\nWhat not to include:\r\n\r\nBirthdate\r\nComplete name\r\nHome address\r\nDriver’s license (unless your job depends on it)\r\nEthnicity; sex; religion; marital status\r\nThoroughly listing university subjects\r\nThoroughly listing technologies (and please delete Word, PowerPoint, Windows 7, … if you’re a software developer)\r\nMumbo jumbo or too generic sentences (e.g. very responsible and organized, a strong and committed team player, exceptional managerial skills, perfectionist, and a great listener)\r\nLinks allow users to know more on-demand. Create links on what could bring value: companies, projects, sites, blogs, certificates, etc. (I created a “certificates” folder in Google Drive and made it public). Use actual links if you want to keep them after someone prints the resume; use textual links for the rest.\r\n\r\nThe form\r\n‘Form’ is how the content is presented. ‘Form’ is as important as ‘content’, as it deals with psychology and other human factors. This is where you think about the visual layout. Start with a paper wireframe if you want to build your own. However, there are tons of templates around (check the templates at your word processor or search the web). Feel free to use my resume as a starting point. I’m fond of the timeline-based layout.\r\n\r\nThere are a lot of similarities between building a resume and developing a GUI, as both are ways of conveying information. Knowing a bit of UX and data visualization can help a lot but you don’t need to be a professional designer to achieve a good result (to design is not only for designers; developers should have a crash course on design). Let’s go through some tips:\r\n\r\nAlign elements to (an imaginary) grid\r\nConsider bold to highlight the main technologies, responsibilities, training, etc.\r\nUse 3 colors at most (consistently)\r\nUse 3 font types at most (consistently)\r\nAnd do you really need to use Times New Roman for crying out loud? There are plenty of eye-catching fonts out there, serif or sans serif.\r\nRespect a visual hierarchy (e.g. bigger is more important)\r\nCreate visual balance and symmetry\r\nUse gray color to decrease the importance\r\nLess is more: convey the maximum information with the minimum visual load. Keep the resume tidy.\r\n\r\nRemove the “https://”, “www”, and the trailing “/” from explicit links you have (not the ones behind text).\r\nAvoid borders in tables: most tables work well without them.\r\nConsider a short format for dates, like “Feb ‘05” instead of “February 10, 2005”.\r\nAvoid description labels. A well-designed system “speaks by itself” (the system can be a GUI, a codebase, a resume…). It should not depend on explanations. Do you really need to type “Email”, “Work period”, “From”, “To”, “Technologies used”, “Main responsibilities”, …?\r\nDo not use regular sentences; consider “bullet-style writing”. For example:\r\n— “Developed users microservice” vs\r\n“As a programmer, I was in charge of developing the necessary services to read, write and delete company users”\r\n— “Participated in building a gamification VR project” vs\r\n“We designed and programmed the in-house initiative codenamed GIGGITY - Graphical Interface to Get Gamification Immersed and Telegraphed to You”\r\nWith time, some things lose importance: delete them or simplify them. And by the way, nobody cares about the piano lessons you had in third grade.\r\nFor every artifact in your resume, you should ask yourself: “what value does it add?”. Try to: 1) remove the artifact; 2) ask if the message is passed; 3) if no, undo; 4) go to step 1.\r\n\r\nAgain, think about your users. What do they care about and don’t care about? Respect their time and short attention span devoted to you.\r\n\r\nThe end\r\nTry to keep it to one page. If you play with the font sizes, line/paragraph heights, document margins, and simplify it as described, it’s possible. I have two pages, but the second is optional. There are people that maintain a resume and a curriculum vitae (bigger); it requires more work but it might be useful.\r\nCheck how the resume looks when: zooming out to fit the whole page, exporting it (PDF and Docx), and printing it (in black and white, since that’s what a lot of people do), opening it in a smartphone.', '2022-06-19', 2, 'https://miro.medium.com/max/875/1*Bqlhcd0IMCQiQh9Q7EDFuQ.jpeg'),
(9, 'How to change keyboard language', 'just click alt + shift !', '2022-06-20', 2, 'https://i.postimg.cc/D0JTfP4f/Another-Medium-logos-black.png'),
(16, 'Text-to-Speech Synthesis: an Overview', 'In my childhood, one of the funniest interactions with a computer was to make it read a fairy tale. You could copy a text into a window and soon listen to a colorless metallic voice stumble through commas and stops weaving a weirdly accented story. At those times it was a miracle.\r\n\r\nNowadays the goal of TTS — the Text-to-Speech conversion technology — is not to simply have machines talk, but to make them sound like humans of different ages and gender. In perspective, we’ll be able to listen to machine-voiced audiobooks and news on TV or to communicate with assistants without noticing the difference.\r\n\r\nHow it can be achieved and what are the main competitors in the field — read in our post.\r\n\r\nQuality measurements\r\nAs a rule the quality of TTS system synthesizers is evaluated from different aspects, including intelligibility, naturalness, and preference of the synthetic speech [4], as well as human perception factors, such as comprehensibility [3].\r\n\r\nIntelligibility: the quality of the audio generated, or the degree of each word being produced in a sentence.\r\n\r\nNaturalness: the quality of the speech generated in terms of its timing structure, pronunciation and rendering emotions.\r\n\r\nPreference: the listeners’ choice of the better TTS; preference and naturalness are influenced by TTS system, signal quality and voice, in isolation and in combination.\r\n\r\nComprehensibility: the degree of received messages being understood.\r\nApproaches of TTS Conversion Compared\r\nDevelopments in Computer Science and Artificial Intelligence influence the approaches to speech synthesis that was evolving through years in response to the recent trends and new possibilities in data collection and processing. While for a long time the two main methods of Text-to-Speech conversion are concatenative TTS and parametric TTS, the Deep Learning revolution has added a new perspective to the problem of speech synthesis, shifting the focus from human-developed speech features to fully machine-obtained parameters [1,2].\r\n\r\nConcatenative TTS\r\nConcatenative TTS relies on high-quality audio clips recordings, which are combined together to form the speech. At the first step voice actors are recorded saying a range of speech units, from whole sentences to syllables that are further labeled and segmented by linguistic units from phones to phrases and sentences forming a huge database. During speech synthesis, a Text-to-Speech engine searches such database for speech units that match the input text, concatenates them together and produces an audio file.\r\n\r\nPros\r\n\r\n- High quality of audio in terms of intelligibility;\r\n\r\n- Possibility to preserve the original actor’s voice;\r\n\r\nCons\r\n\r\n- Such systems are very time consuming because they require huge databases, and hard-coding the combination to form these words;\r\n\r\n- The resulting speech may sound less natural and emotionless, because it is nearly impossible to get the audio recordings of all possible words spoken in all possible combinations of emotions, prosody, stress, etc.\r\nExamples:\r\n\r\nSinging Voice Synthesis is the type of speech synthesis that fits the best opportunities of concatenative TTS. With the possibility to record a specific singer, such systems are able to preserve the heritage by restoring records of stars of the past days, as in Acapella Group, as well as to make your favorite singer perform another song according to your liking, as in Vocaloid.\r\n\r\nFormant Synthesis\r\nFormant synthesis technique is a rule-based TTS technique. It produces speech segments by generating artificial signals based on a set of specified rules mimicking the formant structure and other spectral properties of natural speech. The synthesized speech is produced using an additive synthesis and an acoustic model. The acoustic model uses parameters like, voicing, fundamental frequency, noise levels, etc that varied over time. Formant-based systems can control all aspects of the output speech, producing a wide variety of emotions and different tone voices with the help of some prosodic and intonation modeling techniques.\r\n\r\nPros\r\n\r\n- Highly intelligible synthesized speech, even at high speeds, avoiding the acoustic glitches;\r\n\r\n- Less dependant on a speech corpus to produce the output speech;\r\n\r\n- Well-suited for embedded systems, where memory and microprocessor power are limited.\r\n\r\nCons\r\n\r\n- Low naturalness: the technique produces artificial, robotic-sounding speech that is far from the natural speech spoken by a human.\r\n\r\n- Difficult to design rules that specify the timing of the source and the dynamic values of all filter parameters for even simple words', '2022-06-20', 3, 'https://miro.medium.com/max/1400/1*V5O0ai7G9dlHBg3QHS6jVQ.png'),
(17, 'Can AI generate NFTs?', 'The Generative Adversarial Network, or GAN for short, is an architecture for training a generative model.\r\n\r\nThe architecture is comprised of two models. The generator that we are interested in, and a discriminator model that is used to assist in the training of the generator. Initially, both of the generator and discriminator models were implemented as Multilayer Perceptrons (MLP), although more recently, the models are implemented as deep convolutional neural networks.\r\n\r\nIt can be challenging to understand how a GAN is trained and exactly how to understand and implement the loss function for the generator and discriminator models.\r\n\r\nIn this tutorial, you will discover how to implement the generative adversarial network training algorithm and loss functions.\r\n\r\nAfter completing this tutorial, you will know:\r\n\r\nHow to implement the training algorithm for a generative adversarial network.\r\nHow the loss function for the discriminator and generator work.\r\nHow to implement weight updates for the discriminator and generator models in practice.', '2022-06-20', 4, 'https://media.springernature.com/m685/springer-static/image/art%3A10.1038%2Fs41524-020-00352-0/MediaObjects/41524_2020_352_Fig1_HTML.png');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `posts`
--
ALTER TABLE `posts`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `posts`
--
ALTER TABLE `posts`
  MODIFY `id` int(255) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=20;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
